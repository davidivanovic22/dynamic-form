{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../directives/dynamic-field.directive\";\n\nfunction DynamicFormComponent_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 6);\n  }\n\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(field_r3.containerClass);\n    i0.ɵɵproperty(\"config\", field_r3)(\"group\", ctx_r2.form);\n  }\n}\n\nfunction DynamicFormComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, DynamicFormComponent_div_3_ng_container_1_Template, 1, 4, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport let DynamicFormComponent = /*#__PURE__*/(() => {\n  class DynamicFormComponent {\n    constructor(fb) {\n      this.fb = fb;\n      this.configRow = [];\n      this.config = [];\n      this.submit = new EventEmitter();\n    }\n\n    get controls() {\n      return this.config.filter(({\n        type\n      }) => type !== 'button');\n    }\n\n    get changes() {\n      return this.form.valueChanges;\n    }\n\n    get valid() {\n      return this.form.valid;\n    }\n\n    get value() {\n      return this.form.value;\n    }\n\n    ngOnInit() {\n      this.configRow.forEach(row => {\n        this.config = this.config.concat(row);\n      });\n      this.form = this.createGroup();\n    }\n\n    ngOnChanges() {\n      if (this.form) {\n        const controls = Object.keys(this.form.controls);\n        const configControls = this.controls.map(item => item.name);\n        controls.filter(control => !configControls.includes(control)).forEach(control => this.form.removeControl(control));\n        configControls.filter(control => !controls.includes(control)).forEach(name => {\n          const config = this.config.find(control => control.name === name);\n          this.form.addControl(name, this.createControl(config));\n        });\n      }\n    }\n\n    createGroup() {\n      const group = this.fb.group({});\n      this.controls.forEach(control => group.addControl(control.name, this.createControl(control)));\n      return group;\n    }\n\n    createControl(config) {\n      const {\n        disabled,\n        validation,\n        value\n      } = config;\n      return this.fb.control({\n        disabled,\n        value\n      }, validation);\n    }\n\n    createArray(config) {\n      const {\n        disabled,\n        validation,\n        value\n      } = config;\n      return this.fb.array({\n        [Symbol.iterator]() {\n          return undefined;\n        },\n\n        [Symbol.unscopables]() {\n          return undefined;\n        },\n\n        copyWithin(target, start, end) {\n          return undefined;\n        },\n\n        entries() {\n          return undefined;\n        },\n\n        fill(value, start, end) {\n          return undefined;\n        },\n\n        findIndex(predicate, thisArg) {\n          return 0;\n        },\n\n        flat(depth) {\n          return [];\n        },\n\n        flatMap(callback, thisArg) {\n          return [];\n        },\n\n        forEach(callbackfn, thisArg) {},\n\n        includes(searchElement, fromIndex) {\n          return false;\n        },\n\n        indexOf(searchElement, fromIndex) {\n          return 0;\n        },\n\n        join(separator) {\n          return \"\";\n        },\n\n        keys() {\n          return undefined;\n        },\n\n        lastIndexOf(searchElement, fromIndex) {\n          return 0;\n        },\n\n        length: 0,\n\n        map(callbackfn, thisArg) {\n          return [];\n        },\n\n        pop() {\n          return undefined;\n        },\n\n        push(items) {\n          return 0;\n        },\n\n        reverse() {\n          return [];\n        },\n\n        shift() {\n          return undefined;\n        },\n\n        slice(start, end) {\n          return [];\n        },\n\n        some(predicate, thisArg) {\n          return false;\n        },\n\n        sort(compareFn) {\n          return undefined;\n        },\n\n        toLocaleString() {\n          return \"\";\n        },\n\n        toString() {\n          return \"\";\n        },\n\n        unshift(items) {\n          return 0;\n        },\n\n        values() {\n          return undefined;\n        },\n\n        concat(...items) {\n          return [];\n        },\n\n        every(predicate, thisArg) {},\n\n        filter(predicate, thisArg) {},\n\n        find(predicate, thisArg) {},\n\n        reduce(callbackfn, initialValue) {},\n\n        reduceRight(callbackfn, initialValue) {},\n\n        splice(start, deleteCount, ...items) {\n          return [];\n        },\n\n        disabled,\n        value\n      }, validation);\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.submit.emit(this.value);\n    }\n\n    setDisabled(name, disable) {\n      if (this.form.controls[name]) {\n        const method = disable ? 'disable' : 'enable';\n        this.form.controls[name][method]();\n        return;\n      }\n\n      this.config = this.config.map(item => {\n        if (item.name === name) {\n          item.disabled = disable;\n        }\n\n        return item;\n      });\n    }\n\n    setValue(name, value) {\n      this.form.controls[name].setValue(value, {\n        emitEvent: true\n      });\n    }\n\n  }\n\n  DynamicFormComponent.ɵfac = function DynamicFormComponent_Factory(t) {\n    return new (t || DynamicFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n\n  DynamicFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DynamicFormComponent,\n    selectors: [[\"newt-dynamic-form\"]],\n    inputs: {\n      configRow: \"configRow\"\n    },\n    outputs: {\n      submit: \"submit\"\n    },\n    exportAs: [\"dynamicForm\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"\"], [1, \"form__filtration\"], [1, \"form\", 3, \"formGroup\", \"submit\"], [\"class\", \"row align-items-center\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"align-items-center\"], [\"newtDynamicField\", \"\", 3, \"config\", \"class\", \"group\", 4, \"ngFor\", \"ngForOf\"], [\"newtDynamicField\", \"\", 3, \"config\", \"group\"]],\n    template: function DynamicFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2);\n        i0.ɵɵlistener(\"submit\", function DynamicFormComponent_Template_form_submit_2_listener($event) {\n          return ctx.handleSubmit($event);\n        });\n        i0.ɵɵtemplate(3, DynamicFormComponent_div_3_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.configRow);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.NgForOf, i3.DynamicFieldDirective],\n    styles: [\"\"]\n  });\n  return DynamicFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}